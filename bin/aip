#!/usr/bin/env python
""" 
AIP - Attacker IP Prioritizer

Complete rewrite of AIP by Thomas O'Hara to make AIP easily extensible and docker
compatible. 

Original code in
https://github.com/the-o-man/AIP-Blacklist-Algorithm

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>.
"""

__authors__ = ["Joaquin Bogado <joaquinbogado@duck.com>"]
__contact__ = "stratosphere@aic.fel.cvut.cz"
__copyright__ = "Copyright 2022, Stratosphere Laboratory."
__credits__ = ["Joaqu√≠n Bogado"]
__deprecated__ = False
__license__ = "GPLv3"
__maintainer__ = "Joaquin Bogado"
__version__ = "1.0.0"

import logging
import pandas as pd

from aip.data.access import data_path, project_dir
from aip.models.alpha import Alpha
from aip.models.prioritize import New
from aip.models.prioritize import Consistent
from aip.models.prioritize import RandomForest
from os import makedirs, path, scandir
from datetime import date, timedelta, datetime
import sys


def validate_and_convert_date(date_str):
    """
    Validates a date string in 'YYYY-MM-DD' format and converts it to a date object.
    """
    try:
        dateobj = datetime.strptime(date_str, '%Y-%m-%d')
        return dateobj.date()
    except ValueError as e:
        print('Invalid date format. It should be YYYY-MM-DD')
        raise e

def run_model(aip_model_name, aip_output_dir, aip_model, date_day):
    """
    Run a given model with exception handling
    """
    blocklist=""
    # Make sure output directory is created
    if not path.exists(aip_output_dir):
        makedirs(aip_output_dir)

    try:
        blocklist = aip_model.run(day)
        blocklist.to_csv(path.join(aip_output_dir, f'AIP-{aip_model_name}-{str(date_day)}.csv.gz'), index=False, compression='gzip')
        logging.info(f"{aip_model_name} model completed successfully.")
    except Exception as e:
        logging.error(f"Error running {aip_model_name} model: {e}", exc_info=True)


if __name__ == '__main__':
    if len(sys.argv) == 2:
        datestr = sys.argv[1]
        day = validate_and_convert_date(datestr)
    else:
        day = date.today()

    log_fmt = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    #logging.basicConfig(level=logging.INFO, format=log_fmt)
    logging.basicConfig(level=logging.DEBUG, format=log_fmt)

    #Alpha Model
    output_dir = path.join(project_dir, 'data', 'output', 'Alpha')
    if not path.exists(output_dir):
        makedirs(output_dir)
    alpha = Alpha()
    blocklist = alpha.run(day)
    blocklist = blocklist.rename(columns={'ip':'attacker'})
    pd.DataFrame(blocklist, columns=['attacker']).to_csv(path.join(output_dir,
        f'AIP-Alpha-{str(day)}.csv.gz'), index=False, compression='gzip')
    
    #Alpha 7 Model (seven days in the past)
    output_dir = path.join(project_dir, 'data', 'output', 'Alpha7')
    if not path.exists(output_dir):
        makedirs(output_dir)
    alpha7 = Alpha(lookback=7)
    blocklist = alpha7.run(day)
    blocklist = blocklist.rename(columns={'ip':'attacker'})
    pd.DataFrame(blocklist, columns=['attacker']).to_csv(path.join(output_dir,
        f'AIP-Alpha7-{str(day)}.csv.gz'), index=False, compression='gzip')

    # Prioritize New Model
    output_dir = path.join(data_path, 'output', 'Prioritize_New')
    if not path.exists(output_dir):
        makedirs(output_dir)
    pn = New()
    blocklist = pn.run(day)
    blocklist.to_csv(path.join(output_dir,
        f'AIP-Prioritize_New-{str(day)}.csv.gz'), index=False, compression='gzip')

    # Prioritize Consistent Model
    output_dir = path.join(data_path, 'output', 'Prioritize_Consistent')
    if not path.exists(output_dir):
        makedirs(output_dir)
    pc = Consistent()
    blocklist = pc.run(day)
    blocklist.to_csv(path.join(output_dir,
        f'AIP-Prioritize_Consistent-{str(day)}.csv.gz'), index=False, compression='gzip')
    
    # Prioritize Random Forest Model
    output_dir = path.join(data_path, 'output', 'random_forest')
    if not path.exists(output_dir):
        makedirs(output_dir)
    rf = RandomForest()
    blocklist = rf.run(day)
    blocklist.to_csv(path.join(output_dir,
        f'AIP-Random_Forest-{str(day)}.csv.gz'), index=False, compression='gzip')
