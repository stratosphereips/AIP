#!/usr/bin/env python
""" 
AIP - Attacker IP Prioritizer

Complete rewrite of AIP by Thomas O'Hara to make AIP easily extensible and docker
compatible. 

Original code in
https://github.com/the-o-man/AIP-Blacklist-Algorithm

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>.
"""

__authors__ = ["Joaquin Bogado <joaquinbogado@duck.com>"]
__contact__ = "stratosphere@aic.fel.cvut.cz"
__copyright__ = "Copyright 2022, Stratosphere Laboratory."
__credits__ = ["Joaqu√≠n Bogado"]
__deprecated__ = False
__license__ = "GPLv3"
__maintainer__ = "Joaquin Bogado"
__version__ = "1.0.0"

import argparse
import logging
import sys
from datetime import date
from datetime import datetime
from datetime import timedelta
from os import makedirs
from os import path
from os import scandir
from aip.data.access import data_path
from aip.data.access import project_dir
from aip.models.alpha import Alpha
from aip.models.prioritize import New
from aip.models.prioritize import Consistent
from aip.models.prioritize import RandomForest


def validate_and_convert_date(date_str):
    """
    Validates a date string in 'YYYY-MM-DD' format and converts it to a date object.
    """
    try:
        dateobj = datetime.strptime(date_str, '%Y-%m-%d')
        return dateobj.date()
    except ValueError as e:
        print('Invalid date format. It should be YYYY-MM-DD')
        raise e


def run_model(aip_model_name, aip_output_dir, aip_model, date_day):
    """
    Run a given model with exception handling
    """
    blocklist=""
    # Make sure output directory is created
    if not path.exists(aip_output_dir):
        makedirs(aip_output_dir)

    try:
        blocklist = aip_model.run(date_day)
        blocklist.to_csv(path.join(aip_output_dir, f'AIP-{aip_model_name}-{str(date_day)}.csv.gz'), index=False, compression='gzip')
        logging.info(f"{aip_model_name} model completed successfully.")
    except Exception as e:
        logging.error(f"Error running {aip_model_name} model: {e}", exc_info=True)


if __name__ == '__main__':
    if len(sys.argv) == 2:
        datestr = sys.argv[1]
        day = validate_and_convert_date(datestr)
    else:
        day = date.today()

    # Set up logging
    log_fmt = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    logging.basicConfig(level=logging.DEBUG, format=log_fmt)

    # Run Alpha Model
    run_model('Alpha', path.join(data_path, 'output', 'Alpha'), Alpha(), day)

    # Alpha 7 Model
    run_model('Alpha7', path.join(data_path, 'output', 'Alpha7'), Alpha(lookback=7), day)

    # Prioritize New Model
    run_model('Prioritize_New', path.join(data_path, 'output', 'Prioritize_New'), New(), day)

    # Prioritize Consistent Model
    run_model('Prioritize_Consistent', path.join(data_path, 'output', 'Prioritize_Consistent'), Consistent(), day)

    # Prioritize Random Forest Model
    run_model('Random_Forest', path.join(data_path, 'output', 'random_forest'), RandomForest(), day)
