#!/usr/bin/env python
""" 
AIP - Attacker IP Prioritizer

Complete rewrite of AIP by Thomas O'Hara to make AIP easily extensible and docker
compatible. 

Original code in
https://github.com/the-o-man/AIP-Blacklist-Algorithm

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>.
"""

__authors__ = ["Joaquin Bogado <joaquinbogado@duck.com>"]
__contact__ = "stratosphere@aic.fel.cvut.cz"
__copyright__ = "Copyright 2022, Stratosphere Laboratory."
__credits__ = ["Joaqu√≠n Bogado"]
__deprecated__ = False
__license__ = "GPLv3"
__maintainer__ = "Joaquin Bogado"
__version__ = "1.0.0"

import argparse
import logging
from datetime import date
from os import makedirs
from os import path
from aip.data.access import data_path
from aip.models.alpha import Alpha
from aip.models.prioritize import New
from aip.models.prioritize import Consistent
from aip.models.prioritize import RandomForest
from aip.utils.date_utils import validate_and_convert_date


def run_model(aip_model_name, aip_model, date_day):
    """
    Run a given model with exception handling
    """
    blocklist=""
    model_output_dir = path.join(data_path,'output',aip_model_name)
    # Make sure output directory is created
    if not path.exists(model_output_dir):
        makedirs(model_output_dir)

    try:
        blocklist = aip_model.run(date_day)
        blocklist.to_csv(path.join(model_output_dir, f'AIP-{aip_model_name}-{str(date_day)}.csv.gz'), index=False, compression='gzip')
        logging.info(f"{aip_model_name} model completed successfully.")
    except Exception as e:
        logging.error(f"Error running {aip_model_name} model: {e}", exc_info=True)


def main():
    parser = argparse.ArgumentParser(description='Attacker IP Prioritization (AIP) Tool')
    parser.add_argument('--date', type=str, help='The date for running the models in YYYY-MM-DD format. Defaults to today.', default=str(date.today()))
    parser.add_argument('--model', type=str, choices=['Alpha', 'Alpha7', 'Prioritize_New', 'Prioritize_Consistent', 'Random_Forest', 'all'], default='all', help='Select AIP model to run. Defaults to all.')
    parser.add_argument('-d', '--debug', required=False, help="Debugging mode.", action="store_const", dest="log_level", const=logging.DEBUG, default=logging.ERROR,)
    parser.add_argument('-v', '--verbose', required=False, help="Verbose mode", action="store_const", dest="log_level", const=logging.INFO,)

    args = parser.parse_args()

    # Set up logging
    log_fmt = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    logging.basicConfig(level=args.log_level, format=log_fmt)

    # Validate input date
    run_date_day = validate_and_convert_date(args.date)

    # Run Alpha Model
    if args.model in ['Alpha', 'all']:
        run_model('Alpha', Alpha(), run_date_day)

    # Alpha 7 Model
    if args.model in ['Alpha7', 'all']:
        run_model('Alpha7', Alpha(lookback=7), run_date_day)

    # Prioritize New Model
    if args.model in ['Prioritize_New', 'all']:
        run_model('Prioritize_New', New(), run_date_day)

    # Prioritize Consistent Model
    if args.model in ['Prioritize_Consistent', 'all']:
        run_model('Prioritize_Consistent', Consistent(), run_date_day)

    # Prioritize Random Forest Model
    if args.model in ['Random_Forest', 'all']:
        run_model('Random_Forest', RandomForest(), run_date_day)

if __name__ == '__main__':
    main()
