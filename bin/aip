#!/usr/bin/env python
""" 
AIP - Attacker IP Prioritizer

Complete rewrite of AIP by Thomas O'Hara to make AIP easily extensible and docker
compatible. 

Original code in
https://github.com/the-o-man/AIP-Blacklist-Algorithm

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>.
"""

__authors__ = ["Joaquin Bogado <joaquinbogado@duck.com>"]
__contact__ = "stratosphere@aic.fel.cvut.cz"
__copyright__ = "Copyright 2022, Stratosphere Laboratory."
__credits__ = ["Joaqu√≠n Bogado"]
__deprecated__ = False
__license__ = "GPLv3"
__maintainer__ = "Joaquin Bogado"
__version__ = "1.0.0"

import argparse
import logging
import sys
from datetime import date
from os import makedirs
from os import path
from aip.data.access import data_path
from aip.models.alpha import Alpha
from aip.models.alpha7 import Alpha7
from aip.models.prioritize_new import New
from aip.models.prioritize_consistent import Consistent
from aip.models.random_forest import RandomForest
from aip.utils.date_utils import validate_and_convert_date
from aip.utils.knowledge_base import _rebuild


def run_model(aip_model_name, aip_model, date_day, log_level=logging.ERROR):
    """
    Run a given model with exception handling
    """
    blocklist=""
    model_output_dir = path.join(data_path,'output',aip_model_name)
    # Make sure output directory is created
    if not path.exists(model_output_dir):
        makedirs(model_output_dir)

    try:
        blocklist = aip_model.run(date_day)
        blocklist.to_csv(path.join(model_output_dir, f'AIP-{aip_model_name}-{str(date_day)}.csv.gz'), index=False, compression='gzip')
        logging.info(f"{aip_model_name} model completed successfully.")
    except Exception as err:
        logging.error(f"Error running {aip_model_name} model: {err}")


def main():
    parser = argparse.ArgumentParser(description='Attacker IP Prioritization (AIP) Tool')
    parser.add_argument('-d', '--debug', required=False, help="Debugging mode.", action="store_const", dest="log_level", const=logging.DEBUG, default=logging.ERROR,)
    parser.add_argument('-v', '--verbose', required=False, help="Verbose mode", action="store_const", dest="log_level", const=logging.INFO,)

    subparsers = parser.add_subparsers(dest="command", help="commands")

    # Run Models command 
    run_models_parser = subparsers.add_parser("run-models", help="Run models with optional date range.")
    run_models_parser.add_argument('--start-date', type=str, help='The start date for running the models (YYYY-MM-DD). Default is today.', default=str(date.today()))
    run_models_parser.add_argument('--model', type=str, choices=['Alpha', 'Alpha7', 'Prioritize_New', 'Prioritize_Consistent', 'Random_Forest', 'all'], default='all', help='Select AIP model to run. Default is all models.')

    # Rebuild KB command
    rebuild_kb_parser = subparsers.add_parser("rebuild-kb", help="Rebuild the knowledge base from a specific date.")
    rebuild_kb_parser.add_argument("--start-date", required=True, type=str, help="The date from which to rebuild the knowledge base in YYYY-MM-DD format.")

    args = parser.parse_args()

    # Set up logging
    logger = logging.getLogger('aip')
    log_fmt = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    logging.basicConfig(level=args.log_level, format=log_fmt)

    try: 
        # Validate start_date once not on every command
        if hasattr(args,'start_date'):
            aip_start_date = validate_and_convert_date(args.start_date)
        else:
            # If not set, default to today()
            aip_start_date = date.today()

        # If model is not set, default to today
        if not hasattr(args,'model'):
            args.model = 'all'

        # Rebuild knowledge base
        if args.rebuild_kb:
            rebuild_date = validate_and_convert_date(args.rebuild_kb)
            logger.info(f"Rebuilding knowledge base from {rebuild_date} onwards")
            _rebuild(start_date=rebuild_date, log_level=args.log_level)
            sys.exit()

        # Validate input date
        if args.date: 
            run_date_day = validate_and_convert_date(args.date)

        logging.info(f"Running {args.model} model(s) for date {run_date_day}.")
        # Run Alpha Model
        if args.model in ['Alpha', 'all']:
            run_model('Alpha', Alpha(), run_date_day, args.log_level)

        # Alpha 7 Model
        if args.model in ['Alpha7', 'all']:
            run_model('Alpha7', Alpha7(), run_date_day, args.log_level)

        # Prioritize New Model
        if args.model in ['Prioritize_New', 'all']:
            run_model('Prioritize_New', New(), run_date_day, args.log_level)

        # Prioritize Consistent Model
        if args.model in ['Prioritize_Consistent', 'all']:
            run_model('Prioritize_Consistent', Consistent(), run_date_day, args.log_level)

        # Prioritize Random Forest Model
        if args.model in ['Random_Forest', 'all']:
            run_model('Random_Forest', RandomForest(), run_date_day, args.log_level)
    except ValueError as err:
        logger.error(err)
        sys.exit()

if __name__ == '__main__':
    main()
